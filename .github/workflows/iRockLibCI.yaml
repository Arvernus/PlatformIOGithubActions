name: CI

on:
  workflow_call:
    inputs:
      private:
        default: true
        required: false
        type: boolean
    secrets:
      PLATFORMIO_AUTH_TOKEN:
        required: true
env:
  PLATFORMIO_AUTH_TOKEN: ${{ secrets.PLATFORMIO_AUTH_TOKEN }}
  CI: true
  
jobs:
  setup:
    name: Setup CI
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # nessesary to get version history
      - name: Get version
        id: version
        uses: paulhatch/semantic-version@v5.4.0
      - name: get version of file
        id: version_file
        uses: notiz-dev/github-action-json-property@release
        with:
          path: "library.json"
          prop_path: "version"
      - name: Print variables
        run: |
          echo version_tag: ${{ steps.version.outputs.version_tag }}
          echo version: ${{ steps.version.outputs.version }}
          echo up_version: ${{ steps.version.outputs.version != steps.version_file.outputs.prop}}
          echo pullrequest: ${{github.event_name == 'pull_request'}}
          echo pullrequest_end: ${{github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true && github.event.pull_request.base.ref =='main'}}
    outputs:
      version_tag: ${{ steps.version.outputs.version_tag }}
      version: ${{ steps.version.outputs.version }}
      up_version: ${{ steps.version.outputs.version != steps.version_file.outputs.prop}}
      pullrequest: ${{github.event_name == 'pull_request'}}
      pullrequest_end: ${{github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true && github.event.pull_request.base.ref =='main'}}

  up_version:
    if: ${{needs.setup.outputs.up_version == 'true'}}
    name: Up Version in lib file
    runs-on: ubuntu-latest
    needs: [setup]
    steps:
      - uses: actions/checkout@v4
      - name: Modify library.json
        uses: maxgfr/actions-change-json@main
        with:
          key: "version"
          value: "${{ needs.setup.outputs.version }}"
          path: library.json
          commit: true

  test:
    name: Test Builds
    runs-on: ubuntu-latest
    needs: [setup]
    steps:
      - uses: actions/checkout@v4
      - name: Modify library.json
        if: ${{needs.setup.outputs.up_version == 'true'}}
        uses: maxgfr/actions-change-json@main
        with:
          key: "version"
          value: "${{ needs.setup.outputs.version }}"
          path: library.json
          commit: false
      - name: Instal simavr
        run: |
          sudo apt-get update
          sudo apt-get install gcc-avr avr-libc libglu1-mesa-dev freeglut3-dev libelf-dev
          git clone https://github.com/buserror/simavr/
          cd simavr
          sudo make install RELEASE=1
          cd
          curl -fsSL https://raw.githubusercontent.com/platformio/platformio-core/develop/platformio/assets/system/99-platformio-udev.rules | sudo tee /etc/udev/rules.d/99-platformio-udev.rules
          sudo service udev restart
      - name: Cache pip
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.platformio/.cache
          key: ${{ runner.os }}-pio
      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - name: Install PlatformIO Core
        run: pip install --upgrade platformio
      - name: get test files
        id: test_files
        run: |
          echo "testfiles=$(find test -name *.cpp | xargs)" >> $GITHUB_OUTPUT
      - name: Run Check first
        run: pio check
      - name: Run PlatformIO Test
        if: ${{steps.test_files.outputs.testfiles != ''}}
        run: |
          export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/usr/local/lib"
          echo "LD_LIBRARY_PATH: $LD_LIBRARY_PATH"
          pio test --without-uploading
      - name: Validate lib json
        run: pio package pack
    
  testMac:
    name: Test Builds with Linux
    runs-on: ubuntu-latest
    needs: [setup]
    steps:
      - uses: actions/checkout@v4
      - name: Modify library.json
        if: ${{needs.setup.outputs.up_version == 'true'}}
        uses: maxgfr/actions-change-json@main
        with:
          key: "version"
          value: "${{ needs.setup.outputs.version }}"
          path: library.json
          commit: false
      - name: Cache pip
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.platformio/.cache
          key: ${{ runner.os }}-pio
      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - name: Install PlatformIO Core
        run: pip install --upgrade platformio
      - name: get test files
        id: test_files
        run: |
          echo "testfiles=$(find test -name *.cpp | xargs)" >> $GITHUB_OUTPUT
      - name: Run PlatformIO Test
        if: ${{steps.test_files.outputs.testfiles != ''}}
        run: |
          pio test --without-uploading -vvv
      - name: Validate lib json
        run: pio package pack

  build:
    if: ${{needs.setup.outputs.pullrequest_end == 'true'}}
    name: Build Lib
    runs-on: ubuntu-latest
    needs: [setup]
    steps:
      - uses: actions/checkout@v4
      - name: Modify library.json
        if: ${{needs.setup.outputs.up_version}}
        uses: maxgfr/actions-change-json@main
        with:
          key: "version"
          value: "${{ needs.setup.outputs.version }}"
          path: library.json
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.platformio/.cache
          key: ${{ runner.os }}-pio
      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - name: Install PlatformIO Core
        run: pip install --upgrade platformio
      - name: Remove not used Files
        continue-on-error: true
        run: |
          rm platformio.ini
          rm src/main.cpp
      - name: build release folder
        run: |
          pio package pack -o ${{ github.event.repository.name }}.tar.gz
      - uses: actions/upload-artifact@v2
        with:
          name: Archive
          path: |
            ${{ github.event.repository.name }}.tar.gz
          if-no-files-found: error

  release:
    if: ${{needs.setup.outputs.pullrequest_end == 'true'}}
    name: Create Release
    runs-on: ubuntu-latest
    needs: [setup, build]
    steps:
      - uses: actions/download-artifact@v2
      - name: Cache pip
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Cache PlatformIO
        uses: actions/cache@v2
        with:
          path: ~/.platformio
          key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}
      - name: Set up Python
        uses: actions/setup-python@v2
      - name: Install PlatformIO
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade platformio
      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.setup.outputs.version_tag }}
          generate_release_notes: true
          files: |
            Archive/${{ github.event.repository.name }}.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: puplish to Platform.io
        if: ${{ inputs.private }}
        run: pio pkg publish --private --owner iRock --no-interactive Archive/${{ github.event.repository.name }}.tar.gz
      - name: puplish to Platform.io
        if: ${{ !inputs.private }}
        run: pio pkg publish --owner iRock --no-interactive Archive/${{ github.event.repository.name }}.tar.gz
