name: CI

on:
  workflow_call:
    secrets:
      PLATFORMIO_AUTH_TOKEN:
        required: true

env:
  PLATFORMIO_AUTH_TOKEN: ${{ secrets.PLATFORMIO_AUTH_TOKEN }}
  CI: true
jobs:
  setup:
    name: Setup CI
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # nessesary to get version history
      - name: Get version
        id: version
        uses: paulhatch/semantic-version@v5.4.0
      - name: get version of file
        id: version_file
        uses: notiz-dev/github-action-json-property@release
        with:
          path: "project.json"
          prop_path: "version"
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.platformio/.cache
          key: ${{ runner.os }}-pio
      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install PlatformIO Core
        run: pip install --upgrade platformio
      - name: get enviroments from file
        id: environment_file
        run: |
          echo "prop=$(pio project config --json-output | jq -cr '.[0][1][0][1]')" >> $GITHUB_OUTPUT
      - name: Print variables
        run: |
          echo environments: ${{ steps.environment_file.outputs.prop }}
          echo version_tag: ${{ steps.version.outputs.version_tag }}
          echo version: ${{ steps.version.outputs.version }}
          echo up_version: ${{ steps.version.outputs.version != steps.version_file.outputs.prop}}
          echo pullrequest: ${{github.event_name == 'pull_request'}}
          echo pullrequest_end: ${{github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true && github.event.pull_request.base.ref =='main'}}
    outputs:
      environments: ${{ steps.environment_file.outputs.prop }}
      version_tag: ${{ steps.version.outputs.version_tag }}
      version: ${{ steps.version.outputs.version }}
      up_version: ${{ steps.version.outputs.version != steps.version_file.outputs.prop}}
      pullrequest: ${{github.event_name == 'pull_request'}}
      pullrequest_end: ${{github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true && github.event.pull_request.base.ref =='main'}}

  up_version:
    if: ${{ needs.setup.outputs.up_version == 'true' }}
    name: Up Version in project file
    runs-on: ubuntu-latest
    needs: [setup]
    steps:
      - run: echo ${{needs.setup.outputs.up_version}}
      - uses: actions/checkout@v4
      - name: Modify project.json
        uses: maxgfr/actions-change-json@main
        with:
          key: "version"
          value: "${{ needs.setup.outputs.version }}"
          path: project.json
          commit: true

  test:
    name: Test Builds
    runs-on: ubuntu-latest
    needs: [setup]
    steps:
      - uses: actions/checkout@v4
      - name: Modify project.json
        if: ${{ needs.setup.outputs.up_version == 'true'}}
        uses: maxgfr/actions-change-json@main
        with:
          key: "version"
          value: "${{ needs.setup.outputs.version }}"
          path: project.json
          commit: false
      - name: Install wokwi
        if: ${{ env.WOKWI_CLI_TOKEN != '' }}
        run: |
          curl -L https://wokwi.com/ci/install.sh | sh
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.platformio/.cache
          key: ${{ runner.os }}-pio
      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install PlatformIO Core
        run: pip install --upgrade platformio
      - name: Define Softwareversion
        run: export PLATFORMIO_BUILD_FLAGS="-D SW_VERSION=${{ needs.setup.outputs.version }}"
      - name: Run Check first
        run: pio check
      - name: get test files
        id: test_files
        run: |
          echo "testfiles=$(find test -name *.cpp | xargs)" >> $GITHUB_OUTPUT
      - name: Run PlatformIO Test
        if: ${{steps.test_files.outputs.testfiles != ''}}
        run: pio test --without-uploading
      - name: Run PlatformIO Build instead of Test
        if: ${{steps.test_files.outputs.testfiles == ''}}
        run: pio run

  build:
    if: ${{ needs.setup.outputs.pullrequest_end == 'true'}}
    name: Build Project
    runs-on: ubuntu-latest
    needs: [setup]
    strategy:
      fail-fast: false
      matrix:
        environment: ${{ fromJSON(needs.setup.outputs.environments) }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.platformio/.cache
          key: ${{ runner.os }}-pio
      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install PlatformIO Core
        run: pip install --upgrade platformio
      - name: Build PlatformIO Project
        run: pio run -e ${{ matrix.environment }}
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.environment }}
          path: |
            .pio/build/${{ matrix.environment }}/firmware.elf
          if-no-files-found: error

  release:
    if: ${{ needs.setup.outputs.pullrequest_end == 'true'}}
    name: Create Release
    runs-on: ubuntu-latest
    needs: [setup, build]
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: ./artifacts
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Copy and Rename ELF files
        shell: python
        run: |
          import os
          import shutil
          import glob

          artifacts_path = './artifacts'
          release_path = './release'
          os.makedirs(release_path, exist_ok=True)

          version = "${{ needs.setup.outputs.version }}"

          for root, dirs, files in os.walk(artifacts_path):
              for dir_name in dirs:
                  dir_path = os.path.join(root, dir_name)
                  elf_files = glob.glob(os.path.join(dir_path, '*.elf'))
                  if elf_files:
                      for elf_file in elf_files:
                          new_name = os.path.join(release_path, f'iRockOS-{version}-{dir_name}.elf')
                          shutil.copy(elf_file, new_name)
                          print(f'Copied {elf_file} to {new_name}')
      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.setup.outputs.version_tag }}
          generate_release_notes: true
          files: ./release/*.elf
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
