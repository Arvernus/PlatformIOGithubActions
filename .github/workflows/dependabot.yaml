name: Dependabot

on:
  workflow_call:
    secrets:
      PLATFORMIO_AUTH_TOKEN:
        required: true

env:
  PLATFORMIO_AUTH_TOKEN: ${{ secrets.PLATFORMIO_AUTH_TOKEN }}
  CI: true
jobs:
  setup:
    name: Setup Dependabot
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.analyse_ini.outputs.matrix }}
      libarys: ${{ steps.analyse_ini.outputs.libarys }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.platformio/.cache
          key: ${{ runner.os }}-pio
      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - name: Install PlatformIO Core
        run: pip install --upgrade platformio
      - name: Install PlatformIO Core
        run: pio platform update
      - name: get enviroments and libs from file
        id: analyse_ini
        shell: python
        run: |
          import re
          import os
          import uuid
          def set_output(name, value):
              with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
                  print(f'{name}={value}', file=fh)
          def set_multiline_output(name, value):
              with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
                  delimiter = uuid.uuid1()
                  print(f'{name}<<{delimiter}', file=fh)
                  print(value, file=fh)
                  print(delimiter, file=fh)
          with open("platformio.ini", 'r', encoding="utf-8") as file_in:
              text = file_in.read()
          libarys = []
          text = re.sub(r" ", r" ", text)
          text_processed = re.findall(r"\[\s*env:(.*?)].*?lib_deps *= *(.*?)\n[^\s].*?", text, flags=re.DOTALL)
          for environment in text_processed:
              libs = re.findall(r"\n\s+([^l\s][^i\s][^b\s][^\s]+)", environment[1])
              for lib in libs:
                  this_lib = {}
                  splitted = re.split("@\^|#", lib)
                  this_lib["env"] = str(environment[0])
                  this_lib["lib"] = splitted[0]
                  try:
                      this_lib["current_version"] = splitted[1]
                  except:
                      None
                  libarys.append(this_lib)
          for lib in libarys:
              os.system(f"pio pkg install -l {lib["lib"]} -e {lib["env"]}")
          with open("platformio.ini", 'r', encoding="utf-8") as file_in:
              text = file_in.read()
          text = re.sub(r" ", r" ", text)
          text_processed = re.findall(r"\[\s*env:(.*?)].*?lib_deps *= *(.*?)\n[^\s].*?", text, flags=re.DOTALL)
          for environment in text_processed:
              libs = re.findall(r"\n\s+([^l\s][^i\s][^b\s][^\s]+)", environment[1])
              for lib in libs:
                  splitted = re.split("@\^|#", lib)
                  for lib_i, lib in enumerate(libarys):
                      if lib["lib"] == splitted[0] and lib["env"] == str(environment[0]):
                          try:
                              libarys[lib_i]["new_version"] = splitted[1]
                          except:
                              None
                          try:
                              libarys[lib_i]["update"] = str(libarys[lib_i]["current_version"] != libarys[lib_i]["new_version"]).lower()
                          except:
                              None
                          break
          matrix = {}
          matrix["include"] = []
          for lib in libarys:
              if lib["update"] == "true":
                  matrix["include"].append(lib)
                  
          print("matrix: ", matrix)
          set_output("matrix", str(matrix))

          print("libarys: ", libarys)
          set_output("libarys", str(libarys))

  dependabot:
    name: Dependabot
    runs-on: ubuntu-latest
    needs: [setup]
    strategy:
      matrix: ${{fromJson(needs.setup.outputs.matrix)}}
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.platformio/.cache
          key: ${{ runner.os }}-pio
      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - name: Install PlatformIO Core
        run: pip install --upgrade platformio
      - name: Install PlatformIO Core
        run: pio platform update
      - name: Update Library
        run: pio pkg install -l ${{ matrix.lib }} -e ${{ matrix.env }}
      - name: Check if Branch Exists
        id: check_branch
        shell: python
        run: |
          import os
          import uuid
          def set_output(name, value):
              with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
                  print(f'{name}={value}', file=fh)
          def set_multiline_output(name, value):
              with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
                  delimiter = uuid.uuid1()
                  print(f'{name}<<{delimiter}', file=fh)
                  print(value, file=fh)
                  print(delimiter, file=fh)
          branch_name="auto-update-${{ matrix.env }}-${{ github.ref_name }}-${{ matrix.lib }}-${{ matrix.new_version }}"
          hash = os.system(f"git ls-remote --heads origin {branch_name}")
          if hash == 0:
              set_output("branch_exists", "false")
              set_output("branch_name", branch_name)
          else:
              set_output("branch_exists", "true")
      - uses: fregante/setup-git-user@v2
      - name: Create Branch, Commit Changes and Create Pull Request
        if: steps.check_branch.outputs.branch_exists == 'false'
        shell: python
        run: |
          import re
          import os
          import uuid
          def set_output(name, value):
              with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
                  print(f'{name}={value}', file=fh)
          def set_multiline_output(name, value):
              with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
                  delimiter = uuid.uuid1()
                  print(f'{name}<<{delimiter}', file=fh)
                  print(value, file=fh)
                  print(delimiter, file=fh)
          os.system(f"git config --global user.name 'dependabot[bot]'")
          os.system(f"git checkout -b ${{ steps.check_branch.outputs.branch_name }}")
          os.system(f"git add platformio.ini")
          os.system(f"git commit -m 'Update ${{ matrix.lib }} in ${{ matrix.env }} to version ${{ matrix.new_version }}'")
          os.system(f"git push --set-upstream origin ${{ steps.check_branch.outputs.branch_name }}")
          os.system(f"gh pr create --title 'Update ${{matrix.lib}} in ${{matrix.env}} to version ${{matrix.new_version}}' --body 'This auto-generated pull request updates ${{matrix.lib}} in ${{matrix.env}} to ${{matrix.new_version}}. Please review.' --base ${{github.base_ref}} --head ${{steps.check_branch.outputs.branch_name}}")