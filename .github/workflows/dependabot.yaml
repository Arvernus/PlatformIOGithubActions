name: Dependabot

on:
  workflow_call:
    secrets:
      PLATFORMIO_AUTH_TOKEN:
        required: true
    inputs:
      is_lib:
        required: false
        type: boolean
        default: false

env:
  PLATFORMIO_AUTH_TOKEN: ${{ secrets.PLATFORMIO_AUTH_TOKEN }}
  CI: true
jobs:
  setup:
    name: Setup Dependabot
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.analyse_ini.outputs.matrix }}
      libarys: ${{ steps.analyse_ini.outputs.libarys }}
      needs_update: ${{ steps.analyse_ini.outputs.needs_update }}
    steps:
      - uses: actions/checkout@v5
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.platformio/.cache
          key: ${{ runner.os }}-pio
      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - name: Install PlatformIO Core
        run: pip install --upgrade platformio
      - name: Install PlatformIO Core
        if: ${{ inputs.is_lib == false }}
        run: pio platform update
      - name: get enviroments and libs from file
        id: analyse_ini
        shell: python
        run: |
          import re
          import os
          import uuid
          import json

          # Funktion zum Konvertieren von booleschen Werten in Zeichenketten
          def convert_bools(data):
              if isinstance(data, bool):
                  return "true" if data else "false"
              elif isinstance(data, dict):
                  return {k: convert_bools(v) for k, v in data.items()}
              elif isinstance(data, list):
                  return [convert_bools(item) for item in data]
              else:
                  return data

          # Funktion zum Setzen eines Ausgabewerts
          def set_output(name, value):
              value = convert_bools(value)
              print(name, ": ", value)
              with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
                  print(f'{name}={value}', file=fh)

          # Funktion zum Setzen eines mehrzeiligen Ausgabewerts
          def set_multiline_output(name, value):
              value = convert_bools(value)
              print(name, ": ", value)
              with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
                  delimiter = uuid.uuid1()
                  print(f'{name}<<{delimiter}', file=fh)
                  print(value, file=fh)
                  print(delimiter, file=fh)

          # Überprüfen, ob es sich um eine Bibliothek handelt
          is_lib = "${{ inputs.is_lib }}" == "true"

          # Eine leere Liste für Bibliotheken erstellen
          libarys = []

          # Konfigurationsdatei "platformio.json" erstellen
          os.system(f"pio project config --json-output > platformio.json")

          # Konfigurationsdatei "platformio.json" öffnen und laden
          with open("platformio.json", 'r', encoding="utf-8") as file_in:
              config = json.loads(file_in.read())

          # Durch die Konfigurationselemente iterieren
          for member_i in config:
              if member_i[0].startswith("env:"):
                  env = member_i[0][len("env:"):]
                  # Durch die Konfigurationselemente der Umgebung iterieren
                  for member_j in member_i[1]:
                      if member_j[0] == "lib_deps":
                          # Durch die Bibliotheksabhängigkeiten iterieren
                          for lib_text in member_j[1]:
                              lib_text_splitted = re.split("@\^|#", lib_text)
                              if len(lib_text_splitted) == 1:
                                  lib_text_splitted.append("*")
                              libarys.append({
                                  "lib": lib_text_splitted[0],
                                  "env": env,
                                  "current_version": lib_text_splitted[1]
                              })
                              
          # Wenn es sich um eine Bibliothek handelt, die Abhängigkeiten aus der "library.json" laden
          if is_lib:
              with open("library.json", 'r', encoding="utf-8") as file_in:
                  manifest = json.loads(file_in.read())
              if isinstance(manifest['dependencies'], dict):
                  for lib, version in manifest['dependencies'].items():
                      clean_version = re.sub(r'^[\^@]', '', version)
                      libarys.append({
                          "lib": lib,
                          "current_version": clean_version,
                          "env": None
                      })
              else:
                  for dependency in manifest['dependencies']:
                      if 'owner' in dependency:
                          lib = dependency['owner'] + "/" + dependency['name']
                          version = dependency['version']
                          clean_version = re.sub(r'^[\^@]', '', version)
                          libarys.append({
                              "lib": lib,
                              "current_version": clean_version,
                              "env": None
                          })

          # Bibliotheken installieren
          for lib in libarys:
              if lib["env"] is None:
                  os.system(f"pio pkg install -l {lib['lib']}")
              os.system(f"pio pkg install -l {lib['lib']} -e {lib['env']}")

          # Konfigurationsdatei "platformio.json" erneut laden
          os.system(f"pio project config --json-output > platformio.json")
          with open("platformio.json", 'r', encoding="utf-8") as file_in:
              config = json.loads(file_in.read())

          # Durch die Konfigurationselemente iterieren
          for member_i in config:
              if member_i[0].startswith("env:"):
                  env = member_i[0][len("env:"):]
                  for member_j in member_i[1]:
                      if member_j[0] == "lib_deps":
                          # Durch die Bibliotheksabhängigkeiten iterieren
                          for lib_text in member_j[1]:
                              lib_text_splitted = re.split("@\^|#", lib_text)
                              if len(lib_text_splitted) == 1:
                                  lib_text_splitted.append("*")
                              for lib_i, lib in enumerate(libarys):
                                  if lib["lib"].lower() == lib_text_splitted[0].lower() and lib["env"] == env:
                                      libarys[lib_i]["new_version"] = lib_text_splitted[1]
                                      libarys[lib_i]["update"] = libarys[lib_i]["current_version"] != libarys[lib_i]["new_version"]
                                      break
                                  if lib["lib"].lower() == lib_text_splitted[0].lower() and lib["env"] is None:
                                      libarys[lib_i]["new_version"] = lib_text_splitted[1]
                                      libarys[lib_i]["update"] = libarys[lib_i]["current_version"] != libarys[lib_i]["new_version"]
                                      break
                                  

          # Matrix für die Aktualisierung erstellen
          matrix = {}
          matrix["include"] = []
          for lib in libarys:
              if lib["env"] is None:
                  lib["env"] = "*"
              update = lib.get("update", False)
              if update:
                  matrix["include"].append(lib)

          # Ausgabewerte setzen
          set_output("matrix", matrix)
          set_output("libarys", libarys)
          needs_update = len(matrix["include"]) > 0
          set_output("needs_update", needs_update)
          
  dependabot:
    name: Dependabot
    runs-on: ubuntu-latest
    needs: [setup]
    if: ${{ needs.setup.outputs.needs_update == 'true' }}
    strategy:
      matrix: ${{fromJson(needs.setup.outputs.matrix)}}
      fail-fast: false
    steps:
      - uses: actions/checkout@v5
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.platformio/.cache
          key: ${{ runner.os }}-pio
      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - name: Install PlatformIO Core
        if: ${{ matrix.env != '*' }}
        run: pip install --upgrade platformio
      - name: Install PlatformIO Core
        if: ${{ matrix.env != '*' }}
        run: pio pkg update
      - name: Update Library
        if: ${{ matrix.env != '*' }}
        run: pio pkg install -l ${{ matrix.lib }} -e ${{ matrix.env }}
      - name: Update Dependency
        if: ${{ inputs.is_lib == true && matrix.env == '*' }}
        shell: python
        run: |
          import json

          with open("library.json", 'r', encoding="utf-8") as file_in:
              library_data = json.loads(file_in.read())

          version = "^${{ matrix.new_version }}"
          lib = "${{ matrix.lib }}"
          if isinstance(library_data['dependencies'], dict):
              library_data['dependencies'][lib] = version
          else:
              for dependency_i, dependency in enumerate(library_data['dependencies']):
                  if 'owner' in dependency:
                      if library_data['dependencies'][dependency_i]['owner'] == '${{ matrix.owner }}' and library_data['dependencies'][dependency_i]['name'] == '${{ matrix.name }}':
                          library_data['dependencies'][dependency_i]['version'] = version
                          break
                  
          with open('library.json', 'w', encoding='utf-8') as file:
              file.write(json.dumps(library_data, indent=2))
      - name: Create Pull Request
        if: ${{ matrix.env != '*' }}
        uses: peter-evans/create-pull-request@v7
        with:
          title: 'Update ${{matrix.name}} in Envirnonment ${{matrix.env}} to version ${{matrix.new_version}}'
          body: |
            This auto-generated pull request updates ${{matrix.lib}} in Envirnonment ${{matrix.env}} to ${{matrix.new_version}}. Please review.
          add-paths: 'platformio.ini'
          branch: 'auto-update-${{matrix.env}}-${{matrix.lib}}'
          commit-message: |
            Dependabot Update

            ${{matrix.lib}} has been updatet to version ${{matrix.new_version}}
      - name: Create Pull Request
        if: ${{ inputs.is_lib == true && matrix.env == '*' }}
        uses: peter-evans/create-pull-request@v7
        with:
          title: 'Update Dependency ${{matrix.name}} to version ${{matrix.new_version}}'
          body: |
            This auto-generated pull request updates Dependency ${{matrix.lib}} to ${{matrix.new_version}}. Please review.
          add-paths: |
            library.json
          branch: 'auto-update-dependency-${{matrix.lib}}'
          commit-message: |
            Dependabot Update

            ${{matrix.lib}} has been updatet to version ${{matrix.new_version}}
