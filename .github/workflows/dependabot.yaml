name: Dependabot

on:
  workflow_call:
    secrets:
      PLATFORMIO_AUTH_TOKEN:
        required: true
    inputs:
      is_lib:
        required: false
        type: boolean
        default: false

env:
  PLATFORMIO_AUTH_TOKEN: ${{ secrets.PLATFORMIO_AUTH_TOKEN }}
  CI: true
jobs:
  setup:
    name: Setup Dependabot
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.analyse_ini.outputs.matrix }}
      libarys: ${{ steps.analyse_ini.outputs.libarys }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        if: ${{ inputs.is_lib == false }}
        with:
          path: |
            ~/.cache/pip
            ~/.platformio/.cache
          key: ${{ runner.os }}-pio
      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - name: Install PlatformIO Core
        run: pip install --upgrade platformio
      - name: Install PlatformIO Core
        if: ${{ inputs.is_lib == false }}
        run: pio platform update
      - name: get enviroments and libs from file
        id: analyse_ini
        shell: python
        run: |
          import re
          import os
          import uuid
          def set_output(name, value):
              with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
                  print(f'{name}={value}', file=fh)
          def set_multiline_output(name, value):
              with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
                  delimiter = uuid.uuid1()
                  print(f'{name}<<{delimiter}', file=fh)
                  print(value, file=fh)
                  print(delimiter, file=fh)
          is_lib = os.getenv('INPUT_IS_LIB', 'false').lower() == 'true'
          libarys = []
          if is_lib:
              with open("library.json", 'r', encoding="utf-8") as file_in:
                  library_data = json.load(file_in)
              dependencies = library_data.get("dependencies", {})
              libarys = [{"lib": lib, "current_version": version} for lib, version in dependencies.items()]
          else:
              with open("platformio.ini", 'r', encoding="utf-8") as file_in:
                  text = file_in.read()
              text = re.sub(r" ", r" ", text)
              text_processed = re.findall(r"\[\s*env:(.*?)].*?lib_deps *= *(.*?)\n[^\s].*?", text, flags=re.DOTALL)
              for environment in text_processed:
                  libs = re.findall(r"\n\s+([^l\s][^i\s][^b\s][^\s]+)", environment[1])
                  for lib in libs:
                      this_lib = {}
                      splitted = re.split("@\^|#", lib)
                      this_lib["env"] = str(environment[0])
                      this_lib["lib"] = splitted[0]
                      try:
                          this_lib["current_version"] = splitted[1]
                      except:
                          None
                      libarys.append(this_lib)

          for lib in libarys:
              os.system(f"pio pkg install -l {lib["lib"]} -e {lib["env"]}")
          with open("platformio.ini", 'r', encoding="utf-8") as file_in:
              text = file_in.read()
          text = re.sub(r" ", r" ", text)
          text_processed = re.findall(r"\[\s*env:(.*?)].*?lib_deps *= *(.*?)\n[^\s].*?", text, flags=re.DOTALL)
          for environment in text_processed:
              libs = re.findall(r"\n\s+([^l\s][^i\s][^b\s][^\s]+)", environment[1])
              for lib in libs:
                  splitted = re.split("@\^|#", lib)
                  for lib_i, lib in enumerate(libarys):
                      if lib["lib"] == splitted[0] and lib["env"] == str(environment[0]):
                          try:
                              libarys[lib_i]["new_version"] = splitted[1]
                          except:
                              None
                          try:
                              libarys[lib_i]["update"] = str(libarys[lib_i]["current_version"] != libarys[lib_i]["new_version"]).lower()
                          except:
                              None
                          break
          matrix = {}
          matrix["include"] = []
          for lib in libarys:
              if lib["update"] == "true":
                  matrix["include"].append(lib)
                  
          print("matrix: ", matrix)
          set_output("matrix", str(matrix))

          print("libarys: ", libarys)
          set_output("libarys", str(libarys))
          
          needs_update = "true" if len(matrix["include"]) > 0 else "false"
          print("needs_update: ", needs_update)
          set_output("needs_update", str(needs_update))
          

  dependabot:
    name: Dependabot
    runs-on: ubuntu-latest
    needs: [setup]
    if: ${{ needs.setup.outputs.needs_update == 'true' }}
    strategy:
      matrix: ${{fromJson(needs.setup.outputs.matrix)}}
      fail-fast: false
      max-parallel: 1
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        if: ${{ inputs.is_lib == false }}
        with:
          path: |
            ~/.cache/pip
            ~/.platformio/.cache
          key: ${{ runner.os }}-pio
      - uses: actions/setup-python@v5
        if: ${{ inputs.is_lib == false }}
        with:
          python-version: '3.x'
      - name: Install PlatformIO Core
        if: ${{ inputs.is_lib == false }}
        run: pip install --upgrade platformio
      - name: Install PlatformIO Core
        if: ${{ inputs.is_lib == false }}
        run: pio pkg update
      - name: Update Library
        if: ${{ inputs.is_lib == false }}
        run: pio pkg install -l ${{ matrix.lib }} -e ${{ matrix.env }}
      - name: Update Dependency
        if: ${{ inputs.is_lib == true }}
        shell: python
        run: |
          import json

          with open("library.json", 'r', encoding="utf-8") as file_in:
                  library_data = json.load(file_in)

          for dep in library_data['dependencies']:
              if dep == '${{ matrix.lib }}':
                  library_data['dependencies'][dep] = '^${{ matrix.new_version }}'

          with open('library.json', 'w', encoding='utf-8') as file:
              json.dump(data, file, indent=4)

      - name: Create Pull Request
        if: ${{ inputs.is_lib == false }}
        uses: peter-evans/create-pull-request@v6
        with:
          title: 'Update ${{matrix.lib}} to version ${{matrix.new_version}}'
          body: |
            This auto-generated pull request updates ${{matrix.lib}} to ${{matrix.new_version}}. Please review.
          add-paths: 'platformio.ini'
          branch: 'auto-update-${{matrix.lib}}-${{matrix.new_version}}'
          commit-message: |
            Dependabot Update

            ${{matrix.lib}} has been updatet to version ${{matrix.new_version}}
      - name: Create Pull Request
        if: ${{ inputs.is_lib == true }}
        uses: peter-evans/create-pull-request@v6
        with:
          title: 'Update Dependency ${{matrix.lib}} to version ${{matrix.new_version}}'
          body: |
            This auto-generated pull request updates Dependency ${{matrix.lib}} to ${{matrix.new_version}}. Please review.
          add-paths: 'library.json'
          branch: 'auto-update-${{matrix.lib}}-${{matrix.new_version}}'
          commit-message: |
            Dependabot Update

            ${{matrix.lib}} has been updatet to version ${{matrix.new_version}}
