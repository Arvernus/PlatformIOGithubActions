name: Dependabot

on:
  workflow_call:
    secrets:
      PLATFORMIO_AUTH_TOKEN:
        required: true

env:
  PLATFORMIO_AUTH_TOKEN: ${{ secrets.PLATFORMIO_AUTH_TOKEN }}
  CI: true
jobs:
  setup:
    name: Setup Dependabot
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.analyse_ini.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: get enviroments and libs from file
        id: analyse_ini
        uses: jannekem/run-python-script-action@v1
        with:
          script: |
            import re
            with open("platformio.ini", 'r', encoding="utf-8") as file_in:
                text = file_in.read()
            deff = re.findall(r"default_envs = (.*)", text)
            dic = {}
            #dic["default_envs"] = deff[0].split(", ")
            dic["include"] = []
            text = re.sub(r" ", r" ", text)
            deff = re.findall(r"\[\s*env:(.*?)].*?lib_deps *= *(.*?)\n[^\s].*?", text, flags=re.DOTALL)
            i = 0
            for d in deff:
                temp = re.findall(r"\n\s+([^l\s][^i\s][^b\s][^\s]+)", d[1])
                for t in temp:
                    e = {}
                    splitted = re.split("@\^|#", t)
                    e["env"] = str(d[0])
                    e["lib"] = splitted[0]
                    try:
                        e["current_version"] = splitted[1]
                    except:
                        None
                    dic["include"].append(e)
            print("matrix: ", dic)
            set_output("matrix", str(dic))

  dependabot:
    name: Dependabot
    runs-on: ubuntu-latest
    needs: [setup]
    strategy:
      matrix: ${{fromJson(needs.setup.outputs.matrix)}}
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.platformio/.cache
          key: ${{ runner.os }}-pio
      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install PlatformIO Core
        run: pip install --upgrade platformio
      - name: Install PlatformIO Core
        run: pio platform update
      - name: Update Library
        run: pio pkg install -l ${{ matrix.lib }} -e ${{ matrix.env }}
      - name: get version
        id: compare_version
        uses: jannekem/run-python-script-action@v1
        with:
          script: |
            import re
            with open("platformio.ini", 'r', encoding="utf-8") as file_in:
                text = file_in.read()
            deff = re.findall(r"default_envs = (.*)", text)
            dic = {}
            dic["include"] = []
            text = re.sub(r" ", r" ", text)
            deff = re.findall(r"\[\s*env:(.*?)].*?lib_deps *= *(.*?)\n[^\s].*?", text, flags=re.DOTALL)
            i = 0
            for d in deff:
                temp = re.findall(r"\n\s+([^l\s][^i\s][^b\s][^\s]+)", d[1])
                for t in temp:
                    e = {}
                    splitted = re.split("@\^|#", t)
                    e["env"] = str(d[0])
                    e["lib"] = splitted[0]
                    try:
                        e["potential_new_version"] = splitted[1]
                    except:
                        None
                    dic["include"].append(e)
            update = False
            new_version = ""
            print("${matrix.env}", "${matrix.lib}")
            for i in dic["include"]:
                if i["lib"] == "${matrix.lib}" and i["env"] == "${matrix.env}":
                    update = (i["potential_new_version"] != "${matrix.current_version}")
                    new_version = i["potential_new_version"]
                    print("new_version: ", new_version)
                    set_output("new_version", new_version)
            print("update: ", str(update).lower())
            set_output("update", str(update).lower())
      - name: Check if Branch Exists
        id: check_branch
        if: steps.compare_version.outputs.update == 'true'
        run: |
          BRANCH_NAME="auto-update-${{ github.ref_name }}-${{ matrix.env }}-${{ matrix.lib }}-${{ steps.compare_version.outputs.new_version }}"
          EXISTS=$(git ls-remote --heads origin $BRANCH_NAME)
          if [[ -z "$EXISTS" ]]; then
            echo "::set-output name=branch_exists::false"
            echo "::set-output name=branch_name::$BRANCH_NAME"
          else
            echo "::set-output name=branch_exists::true"
      - name: Create Branch and Commit Changes
        if: steps.check_branch.outputs.branch_exists == 'false' && steps.compare_version.outputs.update == 'true'
        run: |
          git config user.name 'GitHub Actions'
          git config user.email 'actions@github.com'
          git checkout -b ${{ steps.check_branch.outputs.branch_name }}
          # Hier die Änderungen an der `platformio.ini` vornehmen
          git add platformio.ini
          git commit -m "Update ${{ matrix.lib }} in ${{ matrix.env }} to version ${{ steps.compare_version.outputs.new_version }}"
          git push --set-upstream origin ${{ steps.check_branch.outputs.branch_name }}
      - name: Create Pull Request
        if: steps.check_branch.outputs.branch_exists == 'false' && steps.compare_version.outputs.update == 'true'
        uses: peter-evans/create-pull-request@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ steps.check_branch.outputs.branch_name }}
          base: ${{ github.ref_name }}
          title: "Auto-update ${{ matrix.lib }} in ${{ matrix.env }}"
          body: "This auto-generated pull request updates ${{ matrix.lib }} in ${{ matrix.env }} to ${{ steps.compare_version.outputs.new_version }}. Please review."