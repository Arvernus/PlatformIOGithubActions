name: Dependabot

on:
  workflow_call:
    secrets:
      PLATFORMIO_AUTH_TOKEN:
        required: true
    inputs:
      is_lib:
        required: false
        type: boolean
        default: false

env:
  PLATFORMIO_AUTH_TOKEN: ${{ secrets.PLATFORMIO_AUTH_TOKEN }}
  CI: true
jobs:
  setup:
    name: Setup Dependabot
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.analyse_ini.outputs.matrix }}
      libarys: ${{ steps.analyse_ini.outputs.libarys }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.platformio/.cache
          key: ${{ runner.os }}-pio
      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - name: Install PlatformIO Core
        run: pip install --upgrade platformio
      - name: Install PlatformIO Core
        if: ${{ inputs.is_lib == false }}
        run: pio platform update
      - name: get enviroments and libs from file
        id: analyse_ini
        shell: python
        run: |
          import re
          import os
          import uuid
          import json
          def set_output(name, value):
              print(name, ": ", value)
              with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
                  print(f'{name}={value}', file=fh)
          def set_multiline_output(name, value):
              print(name, ": ", value)
              with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
                  delimiter = uuid.uuid1()
                  print(f'{name}<<{delimiter}', file=fh)
                  print(value, file=fh)
                  print(delimiter, file=fh)
          is_lib = "${{ inputs.is_lib }}" == "true"
          libarys = []
          os.system(f"pio project config --json-output > platformio.json")
          with open("platformio.json", 'r', encoding="utf-8") as file_in:
              config = json.loads(file_in.read())
          with open("library.json", 'r', encoding="utf-8") as file_in:
              manifest = json.loads(file_in.read())
          for member_i in config:
              if member_i[0].startswith("env:"):
                  env=member_i[0][len("env:"):]
                  if is_lib:
                      dependencies = manifest["dependencies"]
                      try:
                          # Handling array format
                          for dependency in dependencies:
                              if isinstance(dependency, dict):
                                  lib = f"{dependency.get('owner', '')}/{dependency['name']}" if 'owner' in dependency else dependency['name']
                                  version = dependency['version']
                              else:
                                  lib = dependency
                                  version = dependencies[dependency]
                              clean_version = re.sub(r'^[\^@]', '', version)
                              libarys.append({
                                  "lib": lib,
                                  "current_version": clean_version,
                                  "env": env
                              })
                      except:
                          # Handling object format
                          for lib, version in dependencies.items():
                              clean_version = re.sub(r'^[\^@]', '', version)
                              libarys.append({
                                  "lib": lib,
                                  "current_version": clean_version,
                                  "env": env
                              })
                  else:
                      for member_j in member_i[1]:
                          if member_j[0] == "lib_deps":
                              for lib_text in member_j[1]:
                                  lib_text_splitted = re.split("@\^|#", lib_text)
                                  libarys.append({
                                      "lib": lib_text_splitted[0],
                                      "env": env,
                                      "current_version": lib_text_splitted[1]
                                  })
          for lib in libarys:
              os.system(f"pio pkg install -l {lib["lib"]} -e {lib["env"]}")
          os.system(f"pio project config --json-output > platformio.json")
          with open("platformio.json", 'r', encoding="utf-8") as file_in:
              config = json.loads(file_in.read())
          for member_i in config:
              if member_i[0].startswith("env:"):
                  env=member_i[0][len("env:"):]
                  for member_j in member_i[1]:
                      if member_j[0] == "lib_deps":
                          for lib_text in member_j[1]:
                              lib_text_splitted = re.split("@\^|#", lib_text)
                              for lib_i, lib in enumerate(libarys):
                                  if lib["lib"].lower() == lib_text_splitted[0].lower() and lib["env"] == env:
                                      libarys[lib_i]["new_version"] = lib_text_splitted[1]
                                      libarys[lib_i]["update"] = str(libarys[lib_i]["current_version"] != libarys[lib_i]["new_version"]) 
                                      break
          matrix = {}
          matrix["include"] = []
          for lib in libarys:
              if lib["update"]:
                  matrix["include"].append(lib)
                  
          set_output("matrix", matrix)

          set_output("libarys", libarys)

          needs_update = len(matrix["include"]) > 0
          set_output("needs_update", needs_update)
          

  dependabot:
    name: Dependabot
    runs-on: ubuntu-latest
    needs: [setup]
    if: ${{ needs.setup.outputs.needs_update == 'true' }}
    strategy:
      matrix: ${{fromJson(needs.setup.outputs.matrix)}}
      fail-fast: false
      max-parallel: 1
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        if: ${{ inputs.is_lib == false }}
        with:
          path: |
            ~/.cache/pip
            ~/.platformio/.cache
          key: ${{ runner.os }}-pio
      - uses: actions/setup-python@v5
        if: ${{ inputs.is_lib == false }}
        with:
          python-version: '3.x'
      - name: Install PlatformIO Core
        if: ${{ inputs.is_lib == false }}
        run: pip install --upgrade platformio
      - name: Install PlatformIO Core
        if: ${{ inputs.is_lib == false }}
        run: pio pkg update
      - name: Update Library
        if: ${{ inputs.is_lib == false }}
        run: pio pkg install -l ${{ matrix.lib }} -e ${{ matrix.env }}
      - name: Update Dependency
        if: ${{ inputs.is_lib == true }}
        shell: python
        run: |
          import json

          with open("library.json", 'r', encoding="utf-8") as file_in:
                  library_data = json.load(file_in)

          for dep in library_data['dependencies']:
              if dep == '${{ matrix.lib }}':
                  library_data['dependencies'][dep] = '^${{ matrix.new_version }}'

          with open('library.json', 'w', encoding='utf-8') as file:
              json.dump(data, file, indent=4)

      - name: Create Pull Request
        if: ${{ inputs.is_lib == false }}
        uses: peter-evans/create-pull-request@v6
        with:
          title: 'Update ${{matrix.lib}} to version ${{matrix.new_version}}'
          body: |
            This auto-generated pull request updates ${{matrix.lib}} to ${{matrix.new_version}}. Please review.
          add-paths: 'platformio.ini'
          branch: 'auto-update-${{matrix.lib}}-${{matrix.new_version}}'
          commit-message: |
            Dependabot Update

            ${{matrix.lib}} has been updatet to version ${{matrix.new_version}}
      - name: Create Pull Request
        if: ${{ inputs.is_lib == true }}
        uses: peter-evans/create-pull-request@v6
        with:
          title: 'Update Dependency ${{matrix.lib}} to version ${{matrix.new_version}}'
          body: |
            This auto-generated pull request updates Dependency ${{matrix.lib}} to ${{matrix.new_version}}. Please review.
          add-paths: |
            library.json
            platformio.ini
          branch: 'auto-update-${{matrix.lib}}-${{matrix.new_version}}'
          commit-message: |
            Dependabot Update

            ${{matrix.lib}} has been updatet to version ${{matrix.new_version}}
